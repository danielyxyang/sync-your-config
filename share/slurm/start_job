#!/bin/bash

# set help message
usage=$(cat << EOF
Usage: $(basename $0) [options]

Options:
  -h, --help
  --config <config_file>  Path to the job config file (default: job_config.sh)

EOF
)
# set default values
config_file="job_config.sh"
# parse known options
# args=()
while (( $# > 0 )); do
  case "$1" in
    -h|--help) echo "${usage}"; return 0;;
    --config)  config_file="$2"; shift 2;;
    # *)         echo "Unknown option $1"; return 1;;
    # *)         args+=("$1"); shift 1;;
    *)         break;;
  esac
done
# restore unknown options
# set -- "${args[@]}"


# read job config
if [[ -f "${config_file}" ]]; then
    source "${config_file}"
else
    echo "Warning: ${config_file} not found."
fi



start_time=$(date +%s)
cat << EOF
========================================
START TIME: $(date "+%Y-%m-%d %H:%M:%S" --date="@${start_time}")

INFO
Job name: ${SLURM_JOB_NAME}
Job ID:   $([[ -z "${SLURM_ARRAY_TASK_ID}" ]] && echo "${SLURM_JOBID}" || echo "${SLURM_ARRAY_JOB_ID}_${SLURM_ARRAY_TASK_ID} (${SLURM_JOBID})")

Queue:    ${SLURM_JOB_PARTITION}
Host:     ${SLURM_JOB_NODELIST}
GPU:      $(nvidia-smi --query-gpu=name,count --format=csv,noheader | head -n 1)

Working dir: $(pwd)

COMMAND
$@
========================================
EOF

# init job
[[ $(type -t job_init_hook) == function ]] && job_init_hook

# execute job
"$@"

# tear down job
[[ $(type -t job_tear_down_hook) == function ]] && job_tear_down_hook

end_time=$(date +%s)
duration=$((end_time - start_time))
cat << EOF
========================================
END TIME: $(date "+%Y-%m-%d %H:%M:%S")
DURATION: $((duration / 3600))h $(((duration % 3600) / 60))m $((duration % 60))s
========================================
EOF
